This are the edge cases for my_list`` module
____________________________________________


 edge case 1:
 testing with positive integers
>>> my_list = MyList()
>>> my_list.append(11)
>>> my_list.append(41)
>>> my_list.append(12)
>>> my_list.append(31)
>>> my_list.append(15)
>>> my_list.print_sorted()
[11, 12, 15, 31, 41]

edge case 2
 testig with negative integers
>>> my_list = MyList()
>>> my_list.append(-1)
>>> my_list.append(-4)
>>> my_list.append(-2)
>>> my_list.append(-3)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -4, -3, -2, -1]

edge case 3
testing with float integers
>>> my_list = MyList()
>>> my_list.append(0.1)
>>> my_list.append(4.1)
>>> my_list.append(1.2)
>>> my_list.append(3.1)
>>> my_list.append(1.5)
>>> my_list.print_sorted()
[0.1, 1.2, 1.5, 3.1, 4.1]

edge case 4
testing with an empty list
>>> my_list = MyList([])
>>> my_list.print_sorted()
[]

edge case 5
testing with large numbers
 testing with positive integers
>>> my_list = MyList()
>>> my_list.append(11000)
>>> my_list.append(41000)
>>> my_list.append(12000)
>>> my_list.append(31000)
>>> my_list.append(15000)
>>> my_list.print_sorted()
[11000, 12000, 15000, 31000, 41000]

edge case 6
testing with duplicates
>>> my_list = MyList([2, 2, 7. 7, 3, 3, 1, 1])
>>> my_list.print_sorted()
[1, 1, 2, 2, 3, 3 7, 7]

edge case 7
testing with an already sorted list
>>> my_list = MyList([1, 2, 2, 2, 3, 4, 5, 6])
>>> my_list.print_sorted()
[1, 2, 2, 2, 3, 4, 5, 6]
